// custom bootstrap code 
@256
D=A
@SP
M=D
//call sys.init 0
@sys.init$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@0
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@sys.init
0;JMP
(sys.init$ret.1)

//function main.fibonacci 0
(main.fibonacci)
@0
D=A
@R14
M=D
(LOOP_main.fibonacci)
@R14
D=M
@END_LOOP_main.fibonacci
D;JLE
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@R14
M=M-1 //n--
@LOOP_main.fibonacci
0;JMP
(END_LOOP_main.fibonacci)

// C_PUSH argument 0 
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// C_PUSH constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// lt 
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
D=D-M
@COMPARE
D;JLT
@SP
A=M
M=0
@ELSE
0;JMP
(COMPARE)
@SP
A=M
M=-1
(ELSE)
@SP
M=M+1

//goto if_true
@SP
M=M-1
A=M
D=M
@Source.main.fibonacci$if_true
D;JNE

//goto if_false
@Source.main.fibonacci$if_false
0;JMP

//label if_true
(Source.main.fibonacci$if_true)

// C_PUSH argument 0 
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
A=M
0;JMP

//label if_false
(Source.main.fibonacci$if_false)

// C_PUSH argument 0 
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// C_PUSH constant 2 
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub 
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
D=D-M
@SP
A=M
M=D
@SP
M=M+1

//call main.fibonacci 1
@main.fibonacci$ret.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@main.fibonacci
0;JMP
(main.fibonacci$ret.2)

// C_PUSH argument 0 
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// C_PUSH constant 1 
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub 
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
D=D-M
@SP
A=M
M=D
@SP
M=M+1

//call main.fibonacci 1
@main.fibonacci$ret.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@main.fibonacci
0;JMP
(main.fibonacci$ret.3)

// add 
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
D=D+M
@SP
A=M
M=D
@SP
M=M+1

//return
@LCL
D=M
@R13
M=D
@5
D=A
@R13
D=M-D
@R14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@R13
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@R13
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@R13
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@R13
D=M-D
A=D
D=M
@LCL
M=D
@R14
A=M
A=M
0;JMP

(INFINITE_LOOP)
@INFINITE_LOOP
0;JMP
//function sys.init 0
(sys.init)
@0
D=A
@R14
M=D
(LOOP_sys.init)
@R14
D=M
@END_LOOP_sys.init
D;JLE
@0
D=A
@SP
A=M
M=D
@SP
M=M+1
@R14
M=M-1 //n--
@LOOP_sys.init
0;JMP
(END_LOOP_sys.init)

// C_PUSH constant 4 
@4
D=A
@SP
A=M
M=D
@SP
M=M+1

//call main.fibonacci 1
@main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@1
D=D+A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D
@main.fibonacci
0;JMP
(main.fibonacci$ret.1)

//label while
(Source.sys.init$while)

//goto while
@Source.sys.init$while
0;JMP

(INFINITE_LOOP)
@INFINITE_LOOP
0;JMP
